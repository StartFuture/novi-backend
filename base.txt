{
  "address": {
    "cep": "00000-555",
    "state_user": "RJ",
    "city": "Sao paulo",
    "address_user": "Rua itamontes",
    "address_number": "1235",
    "complements": "brancoo"
  },
  "user": {
    "name_user": "Gabriel Torres Cecconi",
    "date_birth": "24/01/2004",
    "email": "gabrielcecconi@gmail.com.br",
    "cpf": "173.086574.12",
    "cellphone": "(11) 96858-5555",
    "password_user": "senha_secreta",
    "news": true,
    "info_conditions": false
  }
}


==================

from fastapi import FastAPI, HTTPException, status


@app.get('/users') #Lista os primeiros 20 U
def get_users_query(limit: int = 20):
    user_list = list(user_db.values())
    return user_list[:limit]


@app.get('/users/{username}') #Mostra as informações do usuário
def get_users_path(username: str):
    ensure_username_in_db(username)
    return user_db[username]


@app.post('/users') #Criar Usuários
def create_user(user: User):
    username = user.username
    if not user.username:
        raise HTTPException(status_code=status.HTTP_400_IM_A_TEAPOT,
                            detail='Username cannot be empty')
    if username in user_db:
        raise HTTPException(status_code=status.HTTP_409_CONFLICT,
                            detail=f'Cannot create user. Username {username} alredy exist')
    if not re.match(pattern, username):
        raise HTTPException(status_code=status.HTTP_422_UNPROCESSABLE_CONTENT,
                            detail=f'Unable to created user due to semantic errors')
    user_db[username] = user.dict()
    return {'message': f'Successflly create user: {username}'}


data_birth: date = Field(regex=r'^[0-3][0-9]\/?[0-1]?[0-9]\/?[1-2][9,0][0-9]{2}$')


#ideia de checagem de usuário existente
def ensure_username_in_db(username: str):
    if username not in user_db:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,
                            detail= f'Username {username} not found')


connection,cursor = db.conect_database(host=HOST, user=USER, password=PASSWORD, database=DATABASE)

#new_user = f"""INSERT INTO user (id_user, name_user, date_birth, email, cpf, cellphone, id_address, password, news, info_conditions) VALUES ('default', '{name}', '{last_name}', '{birth}', '{email}', '{cpf}', '{cellphone}', 'default', '{password}', '{news}', '{info}')"""

cursor.execute('SELECT * FROM users;')
users = cursor.fetchall()
print(users)


==========================================================================


{
  "name_user": "Gabriel Torres Cecconi",
  "date_birth": "24/01/2004",
  "email": "gabrielcecconi@gmail.com.br",
  "cpf": "12308657412", 
  "cellphone": "(11) 96858-5555",
  "password_user": "senha_secreta",
  "news":  true,
  "info_conditions": false
}



{
  "address": {
    "cep": "00000-555",
    "state_user": "RJ",
    "city": "Sao paulo",
    "address_user": "Rua itamontes",
    "address_number": "1235",
    "complements": "brancoo"
  },
  "user": {
    "name_user": "Gabriel Torres Cecconi",
      "date_birth": "24/01/2004",
      "email": "gabrielcecconi@gmail.com.br",
     "cpf": "123.086574.12", 
     "cellphone": "(11) 96858-5555",
     "password_user": "senha_secreta",
     "news":  true,
      "info_conditions": false
  },
}


